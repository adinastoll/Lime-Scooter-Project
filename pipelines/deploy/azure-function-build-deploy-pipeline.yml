name: 1.0.$(Date:Mdd)$(rev:r) # This is the build number

trigger:
  branches:
    include: 
    - adina-main
  paths:
    include:
    - pipelines
    - DeviceManagement

pool:
  vmImage: 'windows-latest'

variables:
  project: '/DeviceManagement'
  buildConfiguration: 'Release'
  appServiceName: 'fa-limescooter-gmp4'

stages:
- template: ./deploy-resources-steps.yml
- stage: 'Build'
  displayName: 'Build, test and publish'
  jobs:
  - job: default_job
    displayName: Build, test and deploy Azure Functions project
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'Build Azure Function project'
      inputs:
        command: 'build' #This task runs an implicit dotnet restore
        projects: '**/DeviceManagement/AzureFunction/**/*.csproj'
        arguments: --configuration $(buildConfiguration) --output $(System.DefaultWorkingDirectory)/publish_output
      enabled: true  

    - task: DotNetCoreCLI@2
      displayName: 'Unit tests'
      inputs:
        command: 'test' # Auto publishes test results
        arguments: --collect "Code coverage"
        projects: '**/DeviceManagement/**/*Tests.csproj'
      enabled: true  

    - task: ArchiveFiles@2
      displayName: "Archive files"
      inputs:
        rootFolderOrFile: "$(System.DefaultWorkingDirectory)/publish_output" # Root folder / file path to add to the archive. IF a older, everything under it will be added to the resulting archive
        includeRootFolder: false
        archiveFile: "$(System.DefaultWorkingDirectory)/build$(Build.BuildId).zip" # The name of the archive file to create.
      enabled: true 
      
    - publish: '$(System.DefaultWorkingDirectory)/build$(Build.BuildId).zip'
      artifact: drop

- stage: 'Deploy'
  displayName: Deploy Function App
  dependsOn: Build
  jobs:
  - job: default_job
    displayName: Deploy Function App
    steps:
    - download: current
      artifact: drop
      displayName: 'Download artifact'
    - task: AzureFunctionApp@1
      displayName: Deploy Function App
      inputs:
        azureSubscription: $(ServiceConnectionName) # Name of the Azure Resource Manager Service Connection.
        appType: functionApp # Default app type. Or: 'functionAppLinux' - to deploy a function on Linux.
        appName: $(appServiceName) # Name of the existing app service.
        package: '$(Pipeline.Workspace)/drop/build$(Build.BuildId).zip' # File path of the package / folder thta contains App Service content generated by MSBuild or compressed .zip/.war file 
      enabled: true